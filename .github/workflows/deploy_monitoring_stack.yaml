name: Monitoring Stack

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - production
          - development

jobs:
  deploy_monitoring_stack:
    runs-on: ubuntu-latest
    env:
      TF_LOG: ERROR
      CONFIGU_ORG: ${{ secrets.CONFIGU_ORG }}
      CONFIGU_TOKEN: ${{ secrets.CONFIGU_TOKEN }}
    #   TF_TOKEN_backend_api_env0_com: ${{ secrets.TF_TOKEN_backend_api_env0_com }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Configu CLI
      uses: configu/setup-cli-action@v1

    - name: Export configurations for Development
      if: ${{ github.event.inputs.environment == 'development' }}
      run: configu eval --store 'configu' --set 'Development/Monitoring' --schema './monitoring.cfgu.json' | configu export --format 'TerraformTfvars' > "./Terraform/var.auto.tfvars"

    - name: Export configurations for Production
      if: ${{ github.event.inputs.environment == 'production' }}
      run: configu eval --store 'configu' --set 'Production/Monitoring' --schema './monitoring.cfgu.json' | configu export --format 'TerraformTfvars' > "./Terraform/var.auto.tfvars"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.7'

    - name: Initialize Terraform with Dynamic Backend Config
      run: terraform init
      working-directory: ./Terraform
      env:
        TF_CLI_ARGS_init: -backend-config=${{ github.event.inputs.environment }}.hcl

    - name: Apply Terraform Configuration
      run: terraform apply -auto-approve
      working-directory: ./Terraform

    - name: Generate SSH Key File
      run: terraform output -raw private_key > /tmp/myKey.pem
      working-directory: ./Terraform

    - name: Set Permission for SSH Key
      run: chmod 400 /tmp/myKey.pem

    - name: Set Public IP as Env Var
      run: echo "PUBLIC_IP=$(terraform-bin output -raw public_ip)" >> $GITHUB_ENV
      working-directory: ./Terraform

    - name: Debug GITHUB_ENV Content
      run: cat $GITHUB_ENV

    - name: Add Terraform IP to Configu
      run: configu upsert --store 'configu' --set 'Development/Monitoring' --schema './monitoring.cfgu.json' -c "ip=${PUBLIC_IP}"

    - name: Update Ansible Inventory with Public IP
      run: sed -i "s/<placeholder_app>/$PUBLIC_IP/g" Ansible/inventory

    - name: Install Ansible
      run: pip3 install --user ansible

    - name: Show Ansible Inventory (Debugging)
      run: cat Ansible/inventory

    - name: Run Ansible Playbook
      run: ansible-playbook --private-key /tmp/myKey.pem -i inventory monitoringPlaybook.yaml
      working-directory: ./Ansible